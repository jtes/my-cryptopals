import unittest

from mycryptopals import aes


class TestEncryption(unittest.TestCase):
    """Additional tests for AES encryption and decryption"""


def test_128(self):
    key = 'ABCDEFGHIJKLMNOP'
    plain = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed dia'
    encrypted = bytes(
        [0x39, 0xdc, 0x19, 0xa8, 0xd1, 0x69, 0xb5, 0x92, 0xa1, 0x52, 0x1a, 0x00, 0x60, 0x24, 0x23, 0x75, 0xaa, 0x3d, 0xf7, 0x21, 0xf9, 0x7a, 0xd5, 0xf8, 0xf9, 0x9a,
         0x52, 0x20, 0x5d, 0xb6, 0x0a, 0xf3, 0x4c, 0x67, 0x84, 0x88, 0x6e, 0x99, 0xf6, 0xd3, 0x6a, 0x34, 0x5f, 0x45, 0x1f, 0x2a, 0xed, 0xba, 0x9c, 0x82, 0x5c, 0x00,
         0x92, 0xca, 0xdb, 0x90, 0xff, 0x99, 0x60, 0x20, 0xcf, 0x70, 0xc2, 0x84])
    self.assertEqual(aes.encrypt_ecb(key.encode(), plain.encode()), encrypted)
    self.assertEqual(aes.decrypt_ecb(key.encode(), encrypted), plain.encode())


def test_192(self):
    key = 'ABCDEFGHIJKLMNOPQRSTUVWX'
    plain = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed dia'
    encrypted = bytes(
        [0x5b, 0x7f, 0x1d, 0x9d, 0x37, 0xf8, 0x66, 0xd6, 0x7e, 0x2f, 0xb2, 0xf5, 0x3a, 0x8d, 0x33, 0x85, 0x67, 0x02, 0x15, 0xf0, 0x9d, 0xa0, 0x08, 0x93, 0xb5, 0xbb,
         0xff, 0x5e, 0x0c, 0x00, 0x4b, 0xe6, 0x42, 0x58, 0x16, 0x9b, 0x9b, 0xb4, 0x75, 0x8f, 0x6e, 0x8c, 0x8a, 0xce, 0x78, 0x8c, 0x60, 0xe7, 0x5a, 0x1a, 0xe1, 0xd6,
         0xcd, 0x5d, 0x16, 0xb6, 0x1b, 0xce, 0x93, 0xa2, 0x4a, 0x4d, 0xb7, 0xf2])
    self.assertEqual(aes.encrypt_ecb(key.encode(), plain.encode()), encrypted)
    self.assertEqual(aes.decrypt_ecb(key.encode(), encrypted), plain.encode())


def test_256(self):
    key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456'
    plain = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed dia'
    encrypted = bytes(
        [0x29, 0x95, 0xbb, 0x18, 0xac, 0x48, 0xcd, 0xd6, 0xbf, 0x28, 0x09, 0xef, 0xaf, 0xc4, 0x29, 0x5c, 0x95, 0xea, 0xf7, 0xc8, 0x68, 0xd8, 0x94, 0x04, 0x9e, 0x24,
         0xa0, 0xcd, 0x33, 0x8f, 0x96, 0xdf, 0x39, 0xe1, 0x6d, 0x97, 0xee, 0x99, 0xa9, 0xc6, 0x80, 0x39, 0x2a, 0x47, 0xbc, 0xb3, 0xa5, 0xe9, 0xd5, 0x70, 0xf9, 0x1a,
         0xaa, 0xfb, 0x8c, 0xe1, 0x5f, 0x39, 0x6c, 0xb3, 0xb5, 0xcc, 0xf0, 0x58])
    self.assertEqual(aes.encrypt_ecb(key.encode(), plain.encode()), encrypted)
    self.assertEqual(aes.decrypt_ecb(key.encode(), encrypted), plain.encode())


if __name__ == '__main__':
    unittest.main()
